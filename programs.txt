import serial
import time

def GPS_Info(buff):
    # Example function to process the GGA sentence
    print(f"GGA: {buff}")

def main():
    serial_port = "/dev/ttyAMA0"
    baud_rate = 9600

    try:
        ser = serial.Serial(serial_port, baud_rate, timeout=1)
    except serial.SerialException as e:
        print(f"Unable to open serial device: {e}")
        return 1

    buff = ""
    GGA_code = ["", "", ""]
    IsitGGAstring = False
    is_GGA_received_completely = False

    try:
        while True:
            if ser.in_waiting > 0:
                dat = ser.read().decode("ascii", errors="ignore")

                if dat == '$':
                    IsitGGAstring = False
                    buff = ""
                elif IsitGGAstring:
                    buff += dat
                    if dat == '\r':
                        is_GGA_received_completely = True
                else:
                    GGA_code[0], GGA_code[1], GGA_code[2] = GGA_code[1], GGA_co>
                    if GGA_code == ['G', 'G', 'A']:
                        IsitGGAstring = True
                        GGA_code = ["", "", ""]
		if is_GGA_received_completely:
                    GPS_Info(buff)
                    is_GGA_received_completely = False

    except KeyboardInterrupt:
        print("Program interrupted by user")
    finally:
        ser.close()

if __name__ == "__main__":
    main()
**************************************************************************************************
import os
import glob
import time
import sys

# Check if running as root
if os.geteuid() != 0:
    print("This script must be run as root. Use sudo to run the script.")
    sys.exit(1)

# Load necessary kernel modules
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

base_dir = '/sys/bus/w1/devices/'

# Check if any 1-Wire devices are connected
device_folder = glob.glob(base_dir + '28*')
if not device_folder:
    print("No temperature sensor found. Check connections and configuration.")
    sys.exit(1)

device_file = device_folder[0] + '/w1_slave'

def read_temp_raw():
    with open(device_file, 'r') as f:
        lines = f.readlines()
    return lines

def read_temp():
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos + 2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return temp_c, temp_f

while True:
    try:
        temp_c, temp_f = read_temp()
        print(f"Temperature: {temp_c:.2f}°C / {temp_f:.2f}°F")
    except Exception as e:
        print(f"Error reading temperature: {e}")
    time.sleep(1)

******************************************************************************************
import RPi.GPIO as GPIO
import time

# Set up the GPIO mode
GPIO.setmode(GPIO.BCM)

# Set up the GPIO pin for reading the DO output
DO_PIN = 7  # Replace with the actual GPIO pin number
GPIO.setup(DO_PIN, GPIO.IN)

try:
    while True:
        # Read the state of the DO pin
        gas_present = GPIO.input(DO_PIN)

        # Determine if gas is present or not
        if gas_present == GPIO.LOW:
            gas_state = "Gas Present"
        else:
            gas_state = "No Gas"

       # Print the gas state
        print(f"Gas State: {gas_state}")

        time.sleep(0.5)  # Wait for a short period before reading again

except KeyboardInterrupt:
    print("Gas detection stopped by user")

finally:
    # Clean up GPIO settings
    GPIO.cleanup()

****************************************************************************************
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# Your bot token
BOT_TOKEN = '7221358475:AAEgKdZXExMBnFqow8CjAIXcY39vuxdFGtw'

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(name)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text('Hi! Send any message and I will tell you your chat ID.')

async def echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    await update.message.reply_text(f'Your chat ID is {chat_id}')
    logger.info(f'Chat ID: {chat_id}')

def main():
    # Create the Application and pass it your bot's token
    application = Application.builder().token(BOT_TOKEN).build()

    # Register the /start command handler
    application.add_handler(CommandHandler("start", start))

    # Register a handler for all other messages
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Start the Bot
    application.run_polling()

if name == 'main':
    main()
*********************************************************************************************************
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(name)

# Replace 'YOUR_BOT_TOKEN_HERE' with your actual bot token
BOT_TOKEN = '6912048053:AAEXks2jmi84oqHFq0MQkkmXTMlSl-cXZcE'

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    keyboard = [
        [
            InlineKeyboardButton("Get Location", callback_data='location'),
            InlineKeyboardButton("Get Temperature", callback_data='temperature'),
            InlineKeyboardButton("Get Pulse Rate", callback_data='pulse'),
            InlineKeyboardButton("Get Status", callback_data='status'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(
        rf"Hello, {user.mention_html()}! I'm kletech_team5_bot running on your Raspberry Pi. How can I assist you today?",
        reply_markup=reply_markup,
    )

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    response = ""
    if query.data == 'location':
        response = f"The current date and time is {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}. The location is Hubli."
    elif query.data == 'temperature':
        response = "The current temperature is 27 degrees Celsius."
    elif query.data == 'pulse':
        response = "The current pulse rate is 70 BPM."
    elif query.data == 'status':
        response = "The system status is normal. Location: Hubli."
    
    await query.edit_message_text(text=response)
    
    # Prompt the user again
    keyboard = [
        [
            InlineKeyboardButton("Get Location", callback_data='location'),
            InlineKeyboardButton("Get Temperature", callback_data='temperature'),
            InlineKeyboardButton("Get Pulse Rate", callback_data='pulse'),
            InlineKeyboardButton("Get Status", callback_data='status'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "How can I assist you further?",
        reply_markup=reply_markup,
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = "You can use the following commands:\n"
    help_text += "/start - Welcome message and options\n"
    help_text += "/help - Display help information"
    await update.message.reply_text(help_text)

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("help", help_command))

    application.run_polling()

if name == 'main':
    main()
********************************************************************************************************
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522

reader = SimpleMFRC522()

try:
        text = input('New data:')
        print("Now place your tag to write")
        reader.write(text)
        print("Written")
finally:
        GPIO.cleanup()
************************************************************************************************************
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522

reader = SimpleMFRC522()

try:
        id, text = reader.read()
        print(id)
        print(text)
finally:
        GPIO.cleanup()
*********************************************************************************************************
import asyncio
import telegram

# Your bot token
BOT_TOKEN = '7221358475:AAEgKdZXExMBnFqow8CjAIXcY39vuxdFGtw'

# Chat ID of the user or group you want to send the message to
CHAT_ID = '1314494958'  # Replace this with the actual chat ID obtained from the previous script

# Create a bot instance
bot = telegram.Bot(token=BOT_TOKEN)

# Function to send the message
async def send_message():
    try:
        # Use the sendMessage method to send the message
        await bot.send_message(chat_id=CHAT_ID, text='This is an automatic message sent from your Raspberry Pi!')
        print('Message sent successfully!')
    except Exception as e:
        print(f'Error sending message: {e}')

# Run the send_message function
asyncio.run(send_message())
***************************************************************************************************
import os
import glob
import time
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
import asyncio
import telegram
import serial
from datetime import datetime, timedelta
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Main Bot Configuration
MAIN_BOT_TOKEN = '7221358475:AAEgKdZXExMBnFqow8CjAIXcY39vuxdFGtw'
CHAT_ID = '1314494958'
main_bot = telegram.Bot(token=MAIN_BOT_TOKEN)

# Location Bot Configuration
LOCATION_BOT_TOKEN = '7117189713:AAEWVJC14dIsSP9XyDURNqmHA7qgBY9ZO8o'
location_bot = telegram.Bot(token=LOCATION_BOT_TOKEN)

# Temperature Sensor Configuration
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')
base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '28*')[0]
device_file = device_folder + '/w1_slave'

# Gas Sensor Configuration
DO_PIN = 17  # Changed from 7 to 17 to avoid conflict with RFID readers
GPIO.setwarnings(False)  # Disable GPIO warnings
GPIO.setmode(GPIO.BCM)
GPIO.setup(DO_PIN, GPIO.IN)

# RFID Reader Configuration
reader1 = SimpleMFRC522()
reader2 = SimpleMFRC522()  # Assuming the second reader uses different SPI connections

# GPS Configuration
serial_port = "/dev/ttyAMA0"
baud_rate = 9600

# Initialize the timer for the second RFID detection
rfid1_detected_time = None
rfid_timeout = timedelta(minutes=1)  # 6 hours + 3 hours

def read_temp():
    with open(device_file, 'r') as f:
        lines = f.readlines()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        with open(device_file, 'r') as f:
            lines = f.readlines()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos + 2:]
        temp_c = float(temp_string) / 1000.0
        return temp_c

def read_gas():
    return "Gas Detected" if GPIO.input(DO_PIN) == GPIO.LOW else "No Gas Detected"

def read_rfid1():
    id, text = reader1.read_no_block()
    return (id, text) if id else (None, None)

def read_rfid2():
    id, text = reader2.read_no_block()
    return (id, text) if id else (None, None)

def parse_gps_data(data):
    if data.startswith('$GPRMC'):
        parts = data.split(',')
        if len(parts) >= 7 and parts[2] == 'A':
            lat = float(parts[3][:2]) + float(parts[3][2:]) / 60.0
            if parts[4] == 'S': lat = -lat
            lon = float(parts[5][:3]) + float(parts[5][3:]) / 60.0
            if parts[6] == 'W': lon = -lon
            return f"{lat:.6f}, {lon:.6f}"
    return "Location unavailable"

async def send_telegram_message(bot, message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message)
        print(f"Telegram message sent: {message}")
    except Exception as e:
        print(f"Error sending Telegram message: {e}")

async def main_loop():
    global rfid1_detected_time
    
    try:
        ser = serial.Serial(serial_port, baud_rate, timeout=1)
        print(f"Successfully opened serial port: {serial_port}")
    except serial.SerialException as e:
        print(f"Error opening serial port {serial_port}: {e}")
        return

    while True:
        temp_c = read_temp()
        print(f"Temperature: {temp_c:.2f}°C")

        gas_state = read_gas()
        print(f"Gas State: {gas_state}")

        rfid_id1, rfid_text1 = read_rfid1()
        if rfid_id1:
            if rfid1_detected_time is None:  # First detection
                message1 = f"Team 5 is attending class. RFID Tag: {rfid_id1} - {rfid_text1}"
                print(message1)
                await send_telegram_message(main_bot, message1)
                rfid1_detected_time = datetime.now()
            else:  # Second detection within timeout
                message2 = f"Team 5 has reached home. RFID Tag: {rfid_id1} - {rfid_text1}"
                print(message2)
                await send_telegram_message(main_bot, message2)
                rfid1_detected_time = None

        rfid_id2, rfid_text2 = read_rfid2()
        if rfid_id2:
            message2 = f"Team 5 has reached home. RFID Tag: {rfid_id2} - {rfid_text2}"
            print(message2)
            await send_telegram_message(main_bot, message2)
            rfid1_detected_time = None

        if rfid1_detected_time and datetime.now() - rfid1_detected_time > rfid_timeout:
            alert_message = "ALERT: Team 5 has not reached home within 9 hours after attending class."
            print(alert_message)
            await send_telegram_message(main_bot, alert_message)
            rfid1_detected_time = None

        gps_location = "Location unavailable"
        if ser.in_waiting > 0:
            gps_data = ser.readline().decode('ascii', errors='replace').strip()
            gps_location = parse_gps_data(gps_data)
            print(f"Current Location: {gps_location}")

        if temp_c >= 40:
            emergency_message = f"EMERGENCY:Something is Wrong!!!!!!\n Temperature has reached {temp_c:.2f}°C.\nGas C02 Detected\n Location: {gps_location}"
            if gas_state == "Gas Detected":
                emergency_message += " and CO2 detected!"
            print(emergency_message)
            await send_telegram_message(main_bot, emergency_message)
        elif temp_c >= 35:
            emergency_message = f"EMERGENCY: Temperature has reached {temp_c:.2f}°C."
            print(emergency_message)
            await send_telegram_message(main_bot, emergency_message)
        
        await asyncio.sleep(1)

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    keyboard = [
        [
            InlineKeyboardButton("Get Location", callback_data='location'),
            InlineKeyboardButton("Get Temperature", callback_data='temperature'),
            InlineKeyboardButton("Get Status", callback_data='status'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(
        rf"Hello, {user.mention_html()}! I'm kletech_team5_bot running on your Raspberry Pi. How can I assist you today?",
        reply_markup=reply_markup,
    )

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    response = ""
    if query.data == 'location':
        gps_location = "Location unavailable"
        try:
            ser = serial.Serial(serial_port, baud_rate, timeout=1)
            if ser.in_waiting > 0:
                gps_data = ser.readline().decode('ascii', errors='replace').strip()
                gps_location = parse_gps_data(gps_data)
        except serial.SerialException as e:
            gps_location = f"Error retrieving location: {e}"
        
        response = f"The current date and time is {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}. The location is {gps_location}."
        await send_telegram_message(location_bot, response)
    elif query.data == 'temperature':
        temp_c = read_temp()
        response = f"The current temperature is {temp_c:.2f}°C."
    elif query.data == 'status':
        temp_c = read_temp()
        gas_state = read_gas()
        response = f"The system status is normal. Current temperature: {temp_c:.2f}°C, Gas state: {gas_state}. Location: Hubli."
    
    await query.edit_message_text(text=response)
    
    # Prompt the user again
    keyboard = [
        [
            InlineKeyboardButton("Get Location", callback_data='location'),
            InlineKeyboardButton("Get Temperature", callback_data='temperature'),
            InlineKeyboardButton("Get Status", callback_data='status'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "How can I assist you further?",
        reply_markup=reply_markup,
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = "You can use the following commands:\n"
    help_text += "/start - Welcome message and options\n"
    help_text += "/help - Display help information"
    await update.message.reply_text(help_text)

async def bot_loop():
    application = Application.builder().token(MAIN_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("help", help_command))
    await application.run_polling()

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(main_loop())
        loop.create_task(bot_loop())
        loop.run_forever()
    except KeyboardInterrupt:
        print("Program stopped by user")
    finally:
        GPIO.cleanup()
***********************************************************************************
cd ~/Desktop/TELIGRAM
python3 -m venv myenv
source myenv/bin/activate
pip install python-telegram-bot
sudo /home/pi/Desktop/TELIGRAM/myenv/bin/python gpsmerge.py
MAIN_BOT_TOKEN = '7221358475:AAEgKdZXExMBnFqow8CjAIXcY39vuxdFGtw'
CHAT_ID = '1314494958'
LOCATION_BOT_TOKEN = '7117189713:AAEWVJC14dIsSP9XyDURNqmHA7qgBY9ZO8o'
